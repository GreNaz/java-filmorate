CREATE TABLE IF NOT EXISTS DIRECTOR
(
    DIRECTOR_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS GENRE
(
    GENRE_ID INT PRIMARY KEY,
    NAME     VARCHAR(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID INT        NOT NULL PRIMARY KEY,
    NAME   VARCHAR(6) NOT NULL
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    VARCHAR(50) NOT NULL,
    LOGIN    VARCHAR(20) NOT NULL,
    NAME     VARCHAR(50),
    BIRTHDAY DATE        NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS USER_EMAIL_UINDEX ON USERS (EMAIL);
CREATE UNIQUE INDEX IF NOT EXISTS USER_LOGIN_UINDEX ON USERS (LOGIN);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(100) NOT NULL,
    DESCRIPTION  VARCHAR(200) NOT NULL,
    RATE         INT,
    RELEASE_DATE DATE         NOT NULL,
    DURATION     INT          NOT NULL,
    MPA_ID       INT          NOT NULL,
    CONSTRAINT FK_MPA_ID
        FOREIGN KEY (MPA_ID)
            REFERENCES MPA (MPA_ID) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID   BIGINT NOT NULL,
    FRIEND_ID BIGINT NOT NULL,
    PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT FK_FRIENDSHIP_FRIEND_ID
        FOREIGN KEY (FRIEND_ID)
            REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_FRIENDSHIP_USER_ID
        FOREIGN KEY (USER_ID)
            REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

-- CREATE TABLE IF NOT EXISTS FILMS_LIKES
-- (
--     FILM_ID BIGINT NOT NULL,
--     USER_ID BIGINT NOT NULL,
--     PRIMARY KEY (USER_ID, FILM_ID),
--     CONSTRAINT FK_FILMS_LIKES_FILM_ID
--         FOREIGN KEY (FILM_ID)
--             REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
--     CONSTRAINT FK_FILMS_LIKES_USER_ID
--         FOREIGN KEY (USER_ID)
--             REFERENCES USERS (USER_ID) ON DELETE CASCADE
-- );

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID  BIGINT NOT NULL,
    GENRE_ID INT    NOT NULL,
    PRIMARY KEY (GENRE_ID, FILM_ID),
    CONSTRAINT FK_FILM_ID
        FOREIGN KEY (FILM_ID)
            REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    CONSTRAINT FK_GENRE_ID
        FOREIGN KEY (GENRE_ID)
            REFERENCES GENRE (GENRE_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEW
(
    REVIEW_ID   BIGINT AUTO_INCREMENT PRIMARY KEY,
    CONTENT     VARCHAR(500) NOT NULL,
    IS_POSITIVE BOOLEAN      NOT NULL,
    USER_ID     BIGINT       NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FILM_ID     BIGINT       NOT NULL REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    USEFUL      INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS REVIEW_LIKES
(
    REVIEW_ID BIGINT NOT NULL REFERENCES REVIEW (REVIEW_ID) ON DELETE CASCADE,
    USER_ID   BIGINT NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    IS_LIKE   INTEGER DEFAULT 0,
    PRIMARY KEY (USER_ID, REVIEW_ID)
);
CREATE TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_ID     BIGINT NOT NULL,
    DIRECTOR_ID INT    NOT NULL,
    PRIMARY KEY (DIRECTOR_ID, FILM_ID),
    CONSTRAINT FKK_FILM_ID
        FOREIGN KEY (FILM_ID)
            REFERENCES FILMS (FILM_ID),
    CONSTRAINT FK_DIRECTOR_ID
        FOREIGN KEY (DIRECTOR_ID)
            REFERENCES DIRECTOR (DIRECTOR_ID)
            ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID         BIGINT      NOT NULL,
    EVENT_TYPE      VARCHAR(50) NOT NULL,
    EVENT_OPERATION VARCHAR(50) NOT NULL,
    ENTITY_ID       BIGINT      NOT NULL,
    TIME_STAMP      BIGINT      NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FILM_MARKS
(
    FILM_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    MARK    INT NOT NUll,
    PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT FK_FILM_ID_FOR_MARK
        FOREIGN KEY (FILM_ID)
            REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    CONSTRAINT FK_USER_ID_FOR_MARK
        FOREIGN KEY (USER_ID)
            REFERENCES USERS (USER_ID) ON DELETE CASCADE
);